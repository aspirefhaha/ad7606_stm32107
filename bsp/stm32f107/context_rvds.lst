


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2009, RT-Thread Development Team
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2009-01-17     Bernard      first version
   13 00000000         ; */
   14 00000000         
   15 00000000         ;/**
   16 00000000         ; * @addtogroup CORTEX-M3
   17 00000000         ; */
   18 00000000         ;/*@{*/
   19 00000000         
   20 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; interrupt control
                                                             state register
   21 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; system priority r
                                                            egister (2)
   22 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest)
   23 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; value to trigger 
                                                            PendSV exception
   24 00000000         
   25 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   26 00000000                 THUMB
   27 00000000                 REQUIRE8
   28 00000000                 PRESERVE8
   29 00000000         
   30 00000000                 IMPORT           rt_thread_switch_interrupt_flag
   31 00000000                 IMPORT           rt_interrupt_from_thread
   32 00000000                 IMPORT           rt_interrupt_to_thread
   33 00000000         
   34 00000000         ;/*
   35 00000000         ; * rt_base_t rt_hw_interrupt_disable();
   36 00000000         ; */
   37 00000000         rt_hw_interrupt_disable
                               PROC
   38 00000000                 EXPORT           rt_hw_interrupt_disable
   39 00000000 F3EF 8010       MRS              r0, PRIMASK
   40 00000004 B672            CPSID            I
   41 00000006 4770            BX               LR
   42 00000008                 ENDP
   43 00000008         



ARM Macro Assembler    Page 2 


   44 00000008         ;/*
   45 00000008         ; * void rt_hw_interrupt_enable(rt_base_t level);
   46 00000008         ; */
   47 00000008         rt_hw_interrupt_enable
                               PROC
   48 00000008                 EXPORT           rt_hw_interrupt_enable
   49 00000008 F380 8810       MSR              PRIMASK, r0
   50 0000000C 4770            BX               LR
   51 0000000E                 ENDP
   52 0000000E         
   53 0000000E         ;/*
   54 0000000E         ; * void rt_hw_context_switch(rt_uint32 from, rt_uint32 
                       to);
   55 0000000E         ; * r0 --> from
   56 0000000E         ; * r1 --> to
   57 0000000E         ; */
   58 0000000E         rt_hw_context_switch_interrupt
   59 0000000E                 EXPORT           rt_hw_context_switch_interrupt
   60 0000000E         rt_hw_context_switch
                               PROC
   61 0000000E                 EXPORT           rt_hw_context_switch
   62 0000000E         
   63 0000000E         ; set rt_thread_switch_interrupt_flag to 1
   64 0000000E 4A28            LDR              r2, =rt_thread_switch_interrupt
_flag
   65 00000010 6813            LDR              r3, [r2]
   66 00000012 2B01            CMP              r3, #1
   67 00000014 D004            BEQ              _reswitch
   68 00000016 F04F 0301       MOV              r3, #1
   69 0000001A 6013            STR              r3, [r2]
   70 0000001C         
   71 0000001C 4A25            LDR              r2, =rt_interrupt_from_thread ;
                                                             set rt_interrupt_f
                                                            rom_thread
   72 0000001E 6010            STR              r0, [r2]
   73 00000020         
   74 00000020         _reswitch
   75 00000020 4A25            LDR              r2, =rt_interrupt_to_thread ; s
                                                            et rt_interrupt_to_
                                                            thread
   76 00000022 6011            STR              r1, [r2]
   77 00000024         
   78 00000024 4825            LDR              r0, =NVIC_INT_CTRL ; trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   79 00000026 F04F 5180       LDR              r1, =NVIC_PENDSVSET
   80 0000002A 6001            STR              r1, [r0]
   81 0000002C 4770            BX               LR
   82 0000002E                 ENDP
   83 0000002E         
   84 0000002E         ; r0 --> swith from thread stack
   85 0000002E         ; r1 --> swith to thread stack
   86 0000002E         ; psr, pc, lr, r12, r3, r2, r1, r0 are pushed into [from
                       ] stack
   87 0000002E         PendSV_Handler
                               PROC
   88 0000002E                 EXPORT           PendSV_Handler
   89 0000002E         



ARM Macro Assembler    Page 3 


   90 0000002E         ; disable interrupt to protect context switch
   91 0000002E F3EF 8210       MRS              r2, PRIMASK
   92 00000032 B672            CPSID            I
   93 00000034         
   94 00000034         ; get rt_thread_switch_interrupt_flag
   95 00000034 481E            LDR              r0, =rt_thread_switch_interrupt
_flag
   96 00000036 6801            LDR              r1, [r0]
   97 00000038 B191            CBZ              r1, pendsv_exit ; pendsv alread
                                                            y handled
   98 0000003A         
   99 0000003A         ; clear rt_thread_switch_interrupt_flag to 0
  100 0000003A F04F 0100       MOV              r1, #0x00
  101 0000003E 6001            STR              r1, [r0]
  102 00000040         
  103 00000040 481C            LDR              r0, =rt_interrupt_from_thread
  104 00000042 6801            LDR              r1, [r0]
  105 00000044 B129            CBZ              r1, swtich_to_thread ; skip reg
                                                            ister save at the f
                                                            irst time
  106 00000046         
  107 00000046 F3EF 8109       MRS              r1, psp     ; get from thread s
                                                            tack pointer
  108 0000004A E921 0FF0       STMFD            r1!, {r4 - r11} ; push r4 - r11
                                                             register
  109 0000004E 6800            LDR              r0, [r0]
  110 00000050 6001            STR              r1, [r0]    ; update from threa
                                                            d stack pointer
  111 00000052         
  112 00000052         swtich_to_thread
  113 00000052 4919            LDR              r1, =rt_interrupt_to_thread
  114 00000054 6809            LDR              r1, [r1]
  115 00000056 6809            LDR              r1, [r1]    ; load thread stack
                                                             pointer
  116 00000058         
  117 00000058 E8B1 0FF0       LDMFD            r1!, {r4 - r11} ; pop r4 - r11 
                                                            register
  118 0000005C F381 8809       MSR              psp, r1     ; update stack poin
                                                            ter
  119 00000060         
  120 00000060         pendsv_exit
  121 00000060         ; restore interrupt
  122 00000060 F382 8810       MSR              PRIMASK, r2
  123 00000064         
  124 00000064 F04E 0E04       ORR              lr, lr, #0x04
  125 00000068 4770            BX               lr
  126 0000006A                 ENDP
  127 0000006A         
  128 0000006A         ;/*
  129 0000006A         ; * void rt_hw_context_switch_to(rt_uint32 to);
  130 0000006A         ; * r0 --> to
  131 0000006A         ; * this fucntion is used to perform the first thread sw
                       itch
  132 0000006A         ; */
  133 0000006A         rt_hw_context_switch_to
                               PROC
  134 0000006A                 EXPORT           rt_hw_context_switch_to
  135 0000006A         ; set to thread
  136 0000006A 4913            LDR              r1, =rt_interrupt_to_thread



ARM Macro Assembler    Page 4 


  137 0000006C 6008            STR              r0, [r1]
  138 0000006E         
  139 0000006E         ; set from thread to 0
  140 0000006E 4911            LDR              r1, =rt_interrupt_from_thread
  141 00000070 F04F 0000       MOV              r0, #0x0
  142 00000074 6008            STR              r0, [r1]
  143 00000076         
  144 00000076         ; set interrupt flag to 1
  145 00000076 490E            LDR              r1, =rt_thread_switch_interrupt
_flag
  146 00000078 F04F 0001       MOV              r0, #1
  147 0000007C 6008            STR              r0, [r1]
  148 0000007E         
  149 0000007E         ; set the PendSV exception priority
  150 0000007E 4810            LDR              r0, =NVIC_SYSPRI2
  151 00000080 F44F 017F       LDR              r1, =NVIC_PENDSV_PRI
  152 00000084 F8D0 2000       LDR.W            r2, [r0,#0x00] ; read
  153 00000088 EA41 0102       ORR              r1,r1,r2    ; modify
  154 0000008C 6001            STR              r1, [r0]    ; write-back
  155 0000008E         
  156 0000008E         ; trigger the PendSV exception (causes context switch)
  157 0000008E 480B            LDR              r0, =NVIC_INT_CTRL
  158 00000090 F04F 5180       LDR              r1, =NVIC_PENDSVSET
  159 00000094 6001            STR              r1, [r0]
  160 00000096         
  161 00000096         ; enable interrupts at processor level
  162 00000096 B662            CPSIE            I
  163 00000098         
  164 00000098         ; never reach here!
  165 00000098                 ENDP
  166 00000098         
  167 00000098         ; compatible with old version
  168 00000098         rt_hw_interrupt_thread_switch
                               PROC
  169 00000098                 EXPORT           rt_hw_interrupt_thread_switch
  170 00000098 4770            BX               lr
  171 0000009A BF00            NOP
  172 0000009C                 ENDP
  173 0000009C         
  174 0000009C                 IMPORT           rt_hw_hard_fault_exception
  175 0000009C                 EXPORT           HardFault_Handler
  176 0000009C         HardFault_Handler
                               PROC
  177 0000009C         
  178 0000009C         ; get current context
  179 0000009C F3EF 8009       MRS              r0, psp     ; get fault thread 
                                                            stack pointer
  180 000000A0 B500            PUSH             {lr}
  181 000000A2 F7FF FFFE       BL               rt_hw_hard_fault_exception
  182 000000A6 F85D EB04       POP              {lr}
  183 000000AA         
  184 000000AA F04E 0E04       ORR              lr, lr, #0x04
  185 000000AE 4770            BX               lr
  186 000000B0                 ENDP
  187 000000B0         
  188 000000B0                 END
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 5 


              E000ED04 
              E000ED20 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\obj\co
ntext_rvds.d -o.\obj\context_rvds.o -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\
Include -IC:\Keil\ARM\Inc\ST\STM32F10x --list=.\context_rvds.lst ..\..\libcpu\a
rm\cortex-m3\context_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 25 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      None
Comment: .text unused
HardFault_Handler 0000009C

Symbol: HardFault_Handler
   Definitions
      At line 176 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 175 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: HardFault_Handler used once
PendSV_Handler 0000002E

Symbol: PendSV_Handler
   Definitions
      At line 87 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 88 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: PendSV_Handler used once
_reswitch 00000020

Symbol: _reswitch
   Definitions
      At line 74 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 67 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: _reswitch used once
pendsv_exit 00000060

Symbol: pendsv_exit
   Definitions
      At line 120 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 97 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: pendsv_exit used once
rt_hw_context_switch 0000000E

Symbol: rt_hw_context_switch
   Definitions
      At line 60 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 61 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_context_switch used once
rt_hw_context_switch_interrupt 0000000E

Symbol: rt_hw_context_switch_interrupt
   Definitions
      At line 58 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 59 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_context_switch_interrupt used once
rt_hw_context_switch_to 0000006A

Symbol: rt_hw_context_switch_to



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 133 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 134 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_context_switch_to used once
rt_hw_interrupt_disable 00000000

Symbol: rt_hw_interrupt_disable
   Definitions
      At line 37 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 38 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_interrupt_disable used once
rt_hw_interrupt_enable 00000008

Symbol: rt_hw_interrupt_enable
   Definitions
      At line 47 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 48 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_interrupt_enable used once
rt_hw_interrupt_thread_switch 00000098

Symbol: rt_hw_interrupt_thread_switch
   Definitions
      At line 168 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 169 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_interrupt_thread_switch used once
swtich_to_thread 00000052

Symbol: swtich_to_thread
   Definitions
      At line 112 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 105 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: swtich_to_thread used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 20 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 78 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 157 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 23 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 79 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 158 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 22 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 151 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 21 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 150 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rt_hw_hard_fault_exception 00000000

Symbol: rt_hw_hard_fault_exception
   Definitions
      At line 174 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 181 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
Comment: rt_hw_hard_fault_exception used once
rt_interrupt_from_thread 00000000

Symbol: rt_interrupt_from_thread
   Definitions
      At line 31 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 71 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 103 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 140 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S

rt_interrupt_to_thread 00000000

Symbol: rt_interrupt_to_thread
   Definitions
      At line 32 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 75 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 113 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 136 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S

rt_thread_switch_interrupt_flag 00000000

Symbol: rt_thread_switch_interrupt_flag
   Definitions
      At line 30 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
   Uses
      At line 64 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 95 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S
      At line 145 in file ..\..\libcpu\arm\cortex-m3\context_rvds.S

4 symbols
352 symbols in table
